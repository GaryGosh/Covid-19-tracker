{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","s","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStats","stats","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDatapoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapcenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c1aec3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\"s color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: '#cc1034',\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n   \r\n};\r\n\r\nexport const prettyPrintStats = (stats) => \r\nstats ? `+${numeral(stats).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draw circles on map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType=\"cases\") => \r\n    data.map((country) => (\r\n        <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n        >\r\n            <Popup>\r\n                <div className=\"info__container\">\r\n                    <div\r\n                        className=\"info__flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})`}}\r\n                    />\r\n                    <div className=\"info__name\">{country.country}</div>\r\n                    <div className=\"info__confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info__recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info__deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n\r\n        </Circle>\r\n\r\n    ));\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                url=\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {/* Loop through countries to draw circles */}\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format('0,0')}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          //include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDatapoint;\r\n\r\n  for (let date in data.cases) {\r\n    if (lastDatapoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDatapoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDatapoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"http://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const chartData = buildChartData(data);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#cc1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { MenuItem, FormControl, Select, Card, CardContent, } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStats } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapcenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, //United States, United Kingdom\n            value: country.countryInfo.iso2, //USA, UK, FR\n          }));\n\n          const sortedData = sortData(data);\n\n          setTableData(sortedData);\n\n          setMapCountries(data);\n\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    console.log(countryCode);\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide'\n    ? 'https://disease.sh/v3/covid-19/all'\n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapcenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              {/* loop through all countries and shown on drop down options */}\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n          isRed\n          active={casesType === \"cases\"}\n          onClick={e => setCasesType(\"cases\")}\n          title=\"Coronaviris Cases\" cases={prettyPrintStats(countryInfo.todayCases)} total={countryInfo.cases} />\n\n          <InfoBox\n          active={casesType === \"recovered\"}\n          onClick={e => setCasesType(\"recovered\")}\n          title=\"Recovered\" cases={prettyPrintStats(countryInfo.todayRecovered)} total={countryInfo.recovered} />\n\n          <InfoBox\n          isRed\n          active={casesType === \"deaths\"}\n          onClick={e => setCasesType(\"deaths\")}\n          title=\"Deaths\" cases={prettyPrintStats(countryInfo.todayDeaths)} total={countryInfo.deaths} />\n        </div>\n        <Map\n        casesType={casesType}\n        countries={mapCountries}\n        center={mapCenter}\n        zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n                  \n            <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType}/>\n          </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}